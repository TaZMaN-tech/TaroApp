//
//  ViewController.swift
//  TaroApp
//
//  Created by –¢–∞–¥–µ–≤–æ—Å –ö—É—Ä–¥–æ–≥–ª—è–Ω on 19.03.2025.
//

import UIKit

class ViewController: UIViewController, UITextFieldDelegate {

    @IBOutlet var greetingLabel: UILabel!
    @IBOutlet var nameTextField: UITextField!
    @IBOutlet var lovePredictionButton: UIButton!
    @IBOutlet var jobPredictionButton: UIButton!
    @IBOutlet var dayPredictionButton: UIButton!
    @IBOutlet var futurePredictionButton: UIButton!
    @IBOutlet var selfDiscoveryButton: UIButton!
    @IBOutlet var yesNoButton: UIButton!
    @IBOutlet var karmaButton: UIButton!

    
    override func viewDidLoad() {
            super.viewDidLoad()
            setupUI()
            greetingLabel.numberOfLines = 0
            greetingLabel.textAlignment = .center
            addGradientBackground()
            addStarOverlay()
            nameTextField.delegate = self
        }

        override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
            super.touchesBegan(touches, with: event)
            view.endEditing(true)
        }

        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
            if segue.identifier == "toPredictionVC",
               let predictionVC = segue.destination as? PredictionViewController,
               let button = sender as? UIButton {
                predictionVC.name = nameTextField.text
                predictionVC.prediction = button.titleLabel?.text
            }
        }

        @IBAction func buttonTapped(_ sender: UIButton) {
            performSegue(withIdentifier: "toPredictionVC", sender: sender)
        }

        // MARK: - Setup

        func setupUI() {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            greetingLabel.text = "‚ú® –°—É–¥—å–±–∞ —à–µ–ø—á–µ—Ç —Ç–≤–æ—ë –∏–º—è‚Ä¶ –ù–∞–ø–∏—à–∏ –µ–≥–æ, –∏ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä–æ—é—Ç –∏—Å—Ç–∏–Ω—É"
            greetingLabel.font = UIFont.systemFont(ofSize: 26, weight: .semibold)
            greetingLabel.textColor = UIColor.white
            greetingLabel.backgroundColor = UIColor.black.withAlphaComponent(0.3)
            greetingLabel.layer.borderColor = UIColor.white.withAlphaComponent(0.5).cgColor
            greetingLabel.layer.borderWidth = 1.0
            greetingLabel.layer.cornerRadius = 20
            greetingLabel.layer.masksToBounds = true

            // –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            nameTextField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            nameTextField.layer.cornerRadius = 14
            nameTextField.layer.masksToBounds = true

            // –ö–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
            styleButton(lovePredictionButton, title: "‚ù§Ô∏è –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å", colors: [UIColor.systemPink.cgColor, UIColor.systemRed.cgColor])
            styleButton(jobPredictionButton, title: "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É", colors: [UIColor.systemIndigo.cgColor, UIColor.systemBlue.cgColor])
            styleButton(dayPredictionButton, title: "üåû –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å", colors: [UIColor.systemTeal.cgColor, UIColor.systemCyan.cgColor])
            styleButton(futurePredictionButton, title: "üîÆ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –±—É–¥—É—â–µ–µ", colors: [UIColor.systemPurple.cgColor, UIColor.systemIndigo.cgColor])

        
            styleButton(selfDiscoveryButton, title: "üßò –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –≥–∞—Ä–º–æ–Ω–∏—é", colors: [UIColor.systemGreen.cgColor, UIColor.systemMint.cgColor])


            styleButton(yesNoButton, title: "ü©∫ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ", colors: [UIColor.systemOrange.cgColor, UIColor.systemRed.cgColor])

            styleButton(karmaButton, title: "üèñÔ∏è –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–ø—É—Å–∫", colors: [UIColor.systemIndigo.cgColor, UIColor.systemPurple.cgColor])



            animateElements()
        }

        func styleButton(_ button: UIButton, title: String, colors: [CGColor]) {
            button.setTitle(title, for: .normal)
            button.setTitleColor(.white, for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)
            button.layer.cornerRadius = 14
            button.layer.masksToBounds = true
            button.contentEdgeInsets = UIEdgeInsets(top: 8, left: 12, bottom: 8, right: 12)

            // –ì—Ä–∞–¥–∏–µ–Ω—Ç
            let gradientLayer = CAGradientLayer()
            gradientLayer.frame = button.bounds
            gradientLayer.colors = colors
            gradientLayer.startPoint = CGPoint(x: 0, y: 0)
            gradientLayer.endPoint = CGPoint(x: 1, y: 1)
            gradientLayer.cornerRadius = 14

            button.layer.insertSublayer(gradientLayer, at: 0)
        }

        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —ç–∫—Ä–∞–Ω–∞
    func addGradientBackground() {
        let gradient = CAGradientLayer()
        gradient.frame = view.bounds

        gradient.colors = [
            UIColor(red: 1.0, green: 0.85, blue: 0.8, alpha: 1.0).cgColor,   // —Å–≤–µ—Ç–ª–æ-–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π
            UIColor(red: 1.0, green: 0.7, blue: 0.75, alpha: 1.0).cgColor    // –Ω–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
        ]

        gradient.startPoint = CGPoint(x: 0, y: 0)
        gradient.endPoint = CGPoint(x: 1, y: 1)

        view.layer.insertSublayer(gradient, at: 0)
    }

        // –ó–≤—ë–∑–¥–Ω—ã–π —Ñ–æ–Ω (–≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        func addStarOverlay() {
            let stars = UIImageView(image: UIImage(named: "stars_background"))
            stars.alpha = 0.12
            stars.contentMode = .scaleAspectFit
            stars.frame = view.bounds
            view.insertSubview(stars, at: 1)
        }

        override func viewDidLayoutSubviews() {
            super.viewDidLayoutSubviews()
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫, –∫–æ–≥–¥–∞ —Å—Ç–∞–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã —Ä–∞–∑–º–µ—Ä—ã
            updateButtonGradients()
        }

        func updateButtonGradients() {
            for button in [lovePredictionButton, jobPredictionButton, dayPredictionButton, futurePredictionButton, selfDiscoveryButton, yesNoButton, karmaButton] {
                if let gradient = button?.layer.sublayers?.first(where: { $0 is CAGradientLayer }) as? CAGradientLayer {
                    gradient.frame = button?.bounds ?? .zero
                }
            }
        }

    func animateElements() {
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        greetingLabel.alpha = 0
        nameTextField.alpha = 0
        lovePredictionButton.alpha = 0
        jobPredictionButton.alpha = 0
        dayPredictionButton.alpha = 0
        futurePredictionButton.alpha = 0
        selfDiscoveryButton.alpha = 0
        yesNoButton.alpha = 0
        karmaButton.alpha = 0

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        UIView.animate(withDuration: 1.0, delay: 0.2, options: [.curveEaseOut], animations: {
            self.greetingLabel.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 0.4, options: [.curveEaseOut], animations: {
            self.nameTextField.alpha = 1
        }, completion: nil)

        self.view.backgroundColor = .clear
        UIView.animate(withDuration: 1.0, delay: 0.6, options: [.curveEaseOut], animations: {
            self.lovePredictionButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 0.8, options: [.curveEaseOut], animations: {
            self.jobPredictionButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 1.0, options: [.curveEaseOut], animations: {
            self.dayPredictionButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 1.2, options: [.curveEaseOut], animations: {
            self.futurePredictionButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 1.4, options: [.curveEaseOut], animations: {
            self.selfDiscoveryButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 1.6, options: [.curveEaseOut], animations: {
            self.yesNoButton.alpha = 1
        }, completion: nil)

        UIView.animate(withDuration: 1.0, delay: 1.8, options: [.curveEaseOut], animations: {
            self.karmaButton.alpha = 1
        }, completion: nil)
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}
